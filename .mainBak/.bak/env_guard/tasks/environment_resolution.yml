---
# =============================================================================
# Intelligent Environment Resolution Engine (Fixed)
# =============================================================================

- name: "🔍 Capture original environment input"
  set_fact:
    _original_env: "{{ env | default(target_env | default('dev')) | lower | trim }}"

- name: "🔍 Build environment lookup table"
  set_fact:
    _env_lookup: "{{ _environment_resolver | from_yaml }}"

- name: "🔍 Resolve canonical environment name"
  set_fact:
    _canonical_env: >-
      {%- if _original_env in env_guard.environments.keys() -%}
        {{ _original_env }}
      {%- elif _original_env in _env_lookup.keys() -%}
        {{ _env_lookup[_original_env] }}
      {%- else -%}
        dev
      {%- endif -%}

- name: "🔍 Load resolved environment configuration"
  set_fact:
    _resolved_environment: "{{ env_guard.environments[_canonical_env] | combine({'canonical_name': _canonical_env}) }}"

- name: "🔍 Environment resolution summary"
  debug:
    msg: |
      🏠 HOMELAB ENVIRONMENT RESOLUTION
      ├── Original Input: '{{ _original_env }}'
      ├── Canonical Name: '{{ _canonical_env }}'
      ├── Risk Level: {{ _resolved_environment.risk_level }}/10
      ├── Approval Required: {{ _resolved_environment.approval_required }}
      ├── Deployment Window: {{ _resolved_environment.deployment_window }}
      └── Health Check Timeout: {{ _resolved_environment.health_check_timeout }}s

- name: "❌ Environment resolution failed"
  fail:
    msg: |
      ❌ ENVIRONMENT RESOLUTION FAILED

      🏠 Could not resolve environment: '{{ _original_env }}'

      📋 Supported environments:
      {% for env_name, env_config in env_guard.environments.items() %}
      ├── {{ env_name }} (aliases: {{ env_config.aliases | join(', ') }})
      {% endfor %}

      💡 Example usage:
      └── ansible-playbook playbook.yml -e env=dev

      Please specify a valid environment and try again.
  when: _canonical_env not in env_guard.environments.keys()
