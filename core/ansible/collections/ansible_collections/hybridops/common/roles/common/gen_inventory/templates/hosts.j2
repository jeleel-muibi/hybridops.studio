{# Purpose: Generate environment-specific Ansible inventory in INI format.
   Structure: Host definitions appear first, followed by static group hierarchies and site-specific device groups.
   Configuration: Set use_actual_ips=true to render real IPs; otherwise, placeholder_ip is used. #}

# Auto-generated Ansible Inventory
# Environment: {{ env | upper }}
# Generated on: {{ lookup('pipe', 'date -Iseconds') }}
# Generated by: Jeleel Muibi
# Validated by: Environment Guard Framework
# Usage: ansible-playbook -i inventories/{{ env }}/hosts.ini your-playbook.yml
# Note: ansible_host is a placeholder resolved dynamically via ip_mapper at runtime.
{{ '\n' * (header_blank_lines | default(1)) }}

{%- if environments is not defined or env is not defined -%}
# ERROR: Missing 'environments' or 'env' variable.
# Example usage:
#   -e @inventories/inventory_structured.yml -e env=dev
{%- endif -%}

{%- set env_data = environments[env] -%}
{%- set placeholder_ip = placeholder_ip | default('XX.XX.XX.00') -%}
{%- set use_actual_ips = use_actual_ips | default(false) -%}

{# Extract hostnames and group names for the specified environment #}
{%- set ns = namespace(hosts=[], group_names=[]) -%}
{%- for group_name, hosts in env_data | dictsort -%}
  {%- if hosts is sequence and hosts | length > 0 -%}
    {%- set ns.group_names = ns.group_names + [group_name] -%}
    {%- for item in hosts -%}
      {%- if item is mapping -%}
        {%- set ns.hosts = ns.hosts + [item.name | default('UNNAMED')] -%}
      {%- elif item is string -%}
        {%- set ns.hosts = ns.hosts + [item] -%}
      {%- endif -%}
    {%- endfor -%}
  {%- endif -%}
{%- endfor -%}

{# Host group definitions #}
{% for group_name in ns.group_names %}
[{{ group_name }}]
{% for it in env_data[group_name] %}
{% if it is mapping %}
{% set ipval = (use_actual_ips and it.ip) | ternary(it.ip, placeholder_ip) %}
{{ it.name | default('UNNAMED') }} ansible_host={{ ipval }}
{% elif it is string %}
{{ it }} ansible_host={{ placeholder_ip }}
{% endif %}
{% endfor %}

{% endfor %}

{# Static group hierarchies #}
[containers:children]
docker_hosts
k8s_pods

[routers:children]
cisco_routers
vyos_routers

[switches:children]
cisco_switches
arista_switches

[servers:children]
linux_servers
windows_servers

[monitoring:children]
prometheus_servers
grafana_servers

{# Site-specific device groups #}
[tokyo_devices]
{% for name in (tokyo_devices | default([]) | sort) %}
{% if name in ns.hosts %}
{{ name }}
{% endif %}
{% endfor %}

[lagos_devices]
{% for name in (lagos_devices | default([]) | sort) %}
{% if name in ns.hosts %}
{{ name }}
{% endif %}
{% endfor %}
