---
# SPDX-License-Identifier: MIT-0
# Author: Jeleel Muibi (hybridops.studio)
# Created: 2025-09-10 22:55:00 UTC
# Updated: 2025-09-10 — Initial implementation of interactive protection system (concise)
#
# Purpose: Generate a correlation ID once, validate environment, handle approvals, and write audit artifacts.

- name: Generate correlation ID (UUID)
  set_fact:
    env_guard_correlation_id: "{{ env_guard_correlation_id | default(lookup('ansible.builtin.pipe', 'uuidgen') | lower, true)
      }}"
  run_once: true
  delegate_to: localhost

- name: Fallback correlation ID if uuidgen unavailable
  set_fact:
    env_guard_correlation_id: "envguard-{{ ansible_date_time.epoch }}-{{ lookup('ansible.builtin.password', '/dev/null', length=12,
      chars='hex') }}"
  when: env_guard_correlation_id is not defined
  run_once: true
  delegate_to: localhost

- name: Set framework constants
  set_fact:
    _guard_user: "{{ ansible_user_id | default('jeleel-muibi') }}"
    _guard_timestamp: "{{ ansible_date_time.iso8601 }}"
    _guard_version: "2.1.2"
    _separator: "════════════════════════════════════════════════════════════════════════════════════"

- name: Environment Guard Framework Starting
  debug:
    msg: |
      ENVIRONMENT GUARD FRAMEWORK v{{ _guard_version }} (Interactive)
      Date: {{ _guard_timestamp }}
      User: {{ _guard_user }}
      Mode: Interactive environment selection
      Framework: Starting validation pipeline...

- name: Interactive Environment Selection
  pause:
    prompt: |
      ENVIRONMENT GUARD - DEPLOYMENT TARGET SELECTION
      {{ _separator }}
      Available Deployment Environments:
      dev     - Development Environment
        Risk Level: {{ env_guard.environments.dev.risk_level }}/10 (LOW)
        Approval: {{ 'Manual required' if env_guard.environments.dev.approval_required else 'Auto-approved' }}
        Deployment: {{ env_guard.environments.dev.deployment_window | title }}
        Impact: Development systems only

      staging - Staging Environment
        Risk Level: {{ env_guard.environments.staging.risk_level }}/10 (MEDIUM)
        Approval: {{ 'Manual required' if env_guard.environments.staging.approval_required else 'Auto-approved' }}
        Deployment: {{ env_guard.environments.staging.deployment_window | replace('_',' ') | title }}
        Impact: Pre-production validation

      prod    - Production Environment
        Risk Level: {{ env_guard.environments.prod.risk_level }}/10 (HIGH)
        Approval: {{ 'Manual required' if env_guard.environments.prod.approval_required else 'Auto-approved' }}
        Deployment: {{ env_guard.environments.prod.deployment_window | replace('_',' ') | title }}
        Impact: LIVE CUSTOMER SYSTEMS

      Choose carefully - this affects real infrastructure!
      Enter environment (dev/staging/prod) [default: dev]
  register: environment_selection
  when: env is not defined or env == ""

- name: Set environment from user input or variable
  set_fact:
    env: "{{ environment_selection.user_input | default(env) | default('dev') }}"

- name: Handle legacy 'production' input
  set_fact:
    env: "prod"
  when: env == 'production'

- name: Fail if invalid environment
  fail:
    msg: |
      ENVIRONMENT GUARD: DEPLOYMENT BLOCKED
      {{ _separator }}
      ERROR: Invalid environment '{{ env }}'!
      Valid environments: dev, staging, prod
      You provided: {{ env }}
      Valid options:
        dev     - Development environment
        staging - Staging environment
        prod    - Production environment
      Please run the playbook again and select a valid environment.
      {{ _separator }}
  when: env not in ['dev', 'staging', 'prod']

- name: Calculate deployment risk
  set_fact:
    current_env_config: "{{ env_guard.environments[env] }}"
    risk_score: "{{ env_guard.environments[env].risk_level }}"
    requires_approval: "{{ env_guard.environments[env].approval_required }}"
    target_host_count: "{{ ansible_play_hosts | length }}"
    env_upper: "{{ env | upper }}"

- name: Check deployment timing for high-risk environments
  block:
  - name: Calculate all time variables in one task
    set_fact:
      current_weekday: "{{ ansible_date_time.weekday }}"
      current_hour: "{{ ansible_date_time.hour | int }}"
      weekday_names: ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"]

  - name: Calculate derived time values
    set_fact:
      current_day_name: "{{ weekday_names[current_weekday | int] }}"
      is_weekend: "{{ (current_weekday | int) >= 5 }}"

  - name: Calculate maintenance window status
    set_fact:
      in_maintenance_window: "{{ is_weekend and (current_hour >= 10 and current_hour <= 16) }}"

  - name: Deployment timing warning
    debug:
      msg: |
        DEPLOYMENT TIMING NOTICE
        {{ _separator }}
        Current Time: {{ current_day_name }} {{ ansible_date_time.hour }}:{{ ansible_date_time.minute }} UTC
        Environment: {{ env_upper }}
        Preferred Window: {{ current_env_config.deployment_window }}
        Weekday: {{ current_weekday }} ({{ current_day_name }})
        Is Weekend: {{ 'YES' if is_weekend else 'NO' }}
        Status: {{ 'IN WINDOW' if (env != 'prod' or in_maintenance_window) else 'OUTSIDE WINDOW' }}
        {% if env == 'prod' and not in_maintenance_window %}
        Production deployments are recommended during maintenance windows:
        Saturdays/Sundays 10:00-16:00 UTC
        Current time: {{ current_hour }}:{{ ansible_date_time.minute }}
        {% endif %}
        {{ _separator }}
  when: env in ['staging', 'prod']

- name: Production Deployment Warning
  debug:
    msg: |
      PRODUCTION DEPLOYMENT DETECTED
      {{ _separator }}
      ENVIRONMENT: {{ env_upper }}
      RISK LEVEL: {{ risk_score }}/10 (HIGH)
      TARGET HOSTS: {{ target_host_count }} hosts
      USER: {{ _guard_user }}
      TIME: {{ _guard_timestamp }}
      MONITORING: {{ current_env_config.monitoring_level | upper }}
      --------------------------------------------------------------
      Manual approval required for production deployments
      Maintenance window: {{ 'ACTIVE' if in_maintenance_window | default(false) else 'INACTIVE' }}
      {{ _separator }}
  when: env == 'prod'

- name: Production Deployment Justification
  pause:
    prompt: |
      PRODUCTION DEPLOYMENT JUSTIFICATION REQUIRED
      {{ _separator }}
      Environment: {{ env_upper }}
      Risk Level: {{ risk_score }}/10 (HIGH)
      Target Hosts: {{ target_host_count }} hosts
      User: {{ _guard_user }}
      Monitoring: {{ current_env_config.monitoring_level | upper }}

      Please provide justification for this production deployment:
      (e.g., "Critical security patch", "Emergency fix", "Scheduled release")
      Justification
  register: production_justification
  when: requires_approval | bool

- name: Production Approval Required
  pause:
    prompt: |
      PRODUCTION DEPLOYMENT APPROVAL REQUIRED
      {{ _separator }}
      Environment: {{ env_upper }}
      Risk Level: {{ risk_score }}/10 (HIGH)
      Target Hosts: {{ target_host_count }} hosts
      User: {{ _guard_user }}
      Time: {{ _guard_timestamp }}
      Justification: {{ production_justification.user_input | default('Not provided') }}
      Monitoring Level: {{ current_env_config.monitoring_level | upper }}

      This will deploy to PRODUCTION environment!
      This action cannot be undone!
      Live customer systems will be affected!
      To proceed, type 'DEPLOY' (case sensitive)
      --------------------------------------------------------------
  register: production_approval
  when: requires_approval | bool

- name: Production deployment cancelled
  fail:
    msg: |
      PRODUCTION DEPLOYMENT CANCELLED
      {{ _separator }}
      User did not confirm deployment
      You typed: '{{ production_approval.user_input | default('nothing') }}'
      Expected: 'DEPLOY'
      Justification: {{ production_justification.user_input | default('Not provided') }}
      Deployment cancelled for safety
      Correlation ID: {{ env_guard_correlation_id }}
      {{ _separator }}
  when:
  - requires_approval | bool
  - production_approval.user_input != 'DEPLOY'

- name: Environment Guard Validation Complete
  debug:
    msg: |
      ENVIRONMENT GUARD: DEPLOYMENT APPROVED
      {{ _separator }}
      Time: {{ _guard_timestamp }}
      Environment: {{ env_upper }} ({{ current_env_config.monitoring_level }} monitoring)
      Risk Level: {{ risk_score }}/10
      User: {{ _guard_user }}
      Target Hosts: {{ target_host_count }} hosts
      Monitoring: {{ current_env_config.monitoring_level | upper }}
      {% if production_justification is defined and production_justification.user_input is defined and production_justification.user_input %}
      Justification: {{ production_justification.user_input }}
      {% endif %}
      Status: DEPLOYMENT AUTHORIZED
      {{ _separator }}
      Proceeding with deployment...

- name: Set framework variables for other roles
  set_fact:
    validated_env: "{{ env }}"
    environment_type: "{{ current_env_config.monitoring_level }} monitoring"
    env_guard_risk_score: "{{ risk_score }}"
    env_guard_correlation_id: "{{ env_guard_correlation_id }}"
    env_guard_version: "{{ _guard_version }}"
    env_guard_timestamp: "{{ _guard_timestamp }}"
    env_guard_user: "{{ _guard_user }}"
    env_monitoring_level: "{{ current_env_config.monitoring_level }}"
    env_deployment_window: "{{ current_env_config.deployment_window }}"
    deployment_justification: "{{ (production_justification.user_input | default('')) if (production_justification is defined)
      else 'Standard deployment' }}"
    deployment_window_check: "{{ in_maintenance_window | default(true) }}"
    _final_status: "approved"
    env_guard_passed: true

# Publish key values to callback data for CI and external consumers (tests, pipelines)
- name: Publish values for external consumers
  set_stats:
    data:
      env_guard_correlation_id: "{{ env_guard_correlation_id }}"
      env_guard_audit_log_file: "{{ env_guard.audit.log_file }}"
      env_guard_report_prefix: "{{ env_guard.audit.report_prefix }}"

- name: Generate audit trail and reports
  include_tasks: audit_logging.yml

- name: Environment Guard Framework Complete
  debug:
    msg: |
      ENVIRONMENT GUARD FRAMEWORK COMPLETE
      Status: VALIDATION PASSED
      Environment: {{ env_upper }}
      Risk Assessment: {{ env_guard_risk_score }}/10
      Framework Version: v{{ env_guard_version }}
      Correlation ID: {{ env_guard_correlation_id }}
      User: {{ env_guard_user }}
      Timestamp: {{ env_guard_timestamp }}
      Audit Log: {{ env_guard.paths.env_guard_logs_dir }}/env_guard_audit.log
      Reports: {{ env_guard.paths.env_guard_logs_dir }}/{{ env_guard.audit.report_prefix }}_*_{{ (env_guard_correlation_id | regex_replace('[^0-9a-zA-Z]',''))[0:8] }}.md
      Ready for: Next role in deployment pipeline
