---
# =============================================================================
# Environment Guard Framework - Connectivity Test Harness
# Run connectivity tests and validate central artifacts
# Author: Jeleel Muibi | Last Updated: 2025-09-09 21:39:57 UTC
# =============================================================================
# SPDX-License-Identifier: MIT-0

# Play 1 — Execute connectivity validation
- name: Connectivity validation
  hosts: test_targets
  gather_facts: false
  vars:
    show_test_targets: true
    ping_count: 2
    connectivity_timeout: 3 # <- use namespaced var (avoid reserved 'timeout')
    ports: { ssh: 22, http: 80, https: 443 }
  tasks:
  - name: Run connectivity_test role (explicit path from tests/)
    ansible.builtin.import_role:
      name: "{{ playbook_dir }}/.."

# Play 2 — Validate central artifacts and optionally copy for evidence
- name: Validate artifacts
  hosts: localhost
  connection: local
  gather_facts: true
  vars:
    _project_root: "{{ playbook_dir | regex_replace('/common/playbooks.*$', '') | regex_replace('/roles/.*$', '') }}"
    central_root: >-
      {{ vars.get('connectivity_logs_root',
                  connectivity.paths.connectivity_logs_dir
                  | default(_project_root ~ '/common/logs/connectivity_logs')) }}
    run_dir: "{{ vars.get('connectivity_run_dir', central_root ~ '/latest') }}"
    json_name: "{{ connectivity.audit.json_file | default('connectivity_report.json') }}"
    jsonl_name: "{{ connectivity.audit.jsonl_file | default('connectivity_report.jsonl') }}"
    copy_to_output: true
  tasks:
  - name: Stat run_dir (follow symlink if 'latest')
    stat:
      path: "{{ run_dir }}"
      follow: true
    register: run_dir_stat
    changed_when: false

  - name: Discover newest run folder as fallback
    when: not run_dir_stat.stat.exists
    find:
      paths: "{{ central_root }}"
      file_type: directory
      recurse: false
    register: run_dirs

  - name: Choose newest run folder
    when: not run_dir_stat.stat.exists and run_dirs.matched | int > 0
    set_fact:
      run_dir: "{{ (run_dirs.files | sort(attribute='mtime', reverse=True) | first).path }}"

  - name: Re-stat run_dir after fallback
    when: not run_dir_stat.stat.exists
    stat:
      path: "{{ run_dir }}"
      follow: true
    register: run_dir_stat2
    changed_when: false

  - name: Fail if run dir still missing
    fail:
      msg: "No connectivity run directory found under {{ central_root }} (checked: {{ run_dir }})"
    when: (not run_dir_stat.stat.exists) and (run_dir_stat2 is not defined or not run_dir_stat2.stat.exists)

  - name: Check JSON
    stat:
      path: "{{ run_dir }}/{{ json_name }}"
    register: json_stat
    changed_when: false

  - name: Check JSONL (optional)
    stat:
      path: "{{ run_dir }}/{{ jsonl_name }}"
    register: jsonl_stat
    changed_when: false

  - name: Summary
    debug:
      msg: |
        CONNECTIVITY TEST VALIDATION
        RUN DIR : {{ run_dir }}
        JSON    : {{ json_stat.stat.exists | ternary('OK','MISSING') }}
        JSONL   : {{ jsonl_stat.stat.exists | ternary('OK','MISSING') }}
    failed_when: not json_stat.stat.exists

  - name: Ensure tests/output/<run_id>
    when: copy_to_output
    file:
      path: "{{ playbook_dir }}/output/{{ (run_dir | basename) }}"
      state: directory
      mode: '0755'

  - name: Copy artifacts to tests/output/<run_id>
    when: copy_to_output
    copy:
      src: "{{ item }}"
      dest: "{{ playbook_dir }}/output/{{ (run_dir | basename) }}/{{ item | basename }}"
      remote_src: true
      mode: '0644'
    loop:
    - "{{ run_dir }}/{{ json_name }}"
    - "{{ run_dir }}/{{ jsonl_name }}"
    ignore_errors: true
