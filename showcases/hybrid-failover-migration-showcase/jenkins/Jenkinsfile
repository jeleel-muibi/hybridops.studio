
pipeline {
  agent any
  options { timestamps() }
  environment {
    TF_IN_AUTOMATION = 'true'
    TF_INPUT = 'false'
  }
  parameters {
    string(name: 'MIN_CREDIT', defaultValue: '50', description: 'Minimum available credit required to choose a cloud')
    string(name: 'IMAGE_VERSION', defaultValue: 'latest', description: 'Control node image version or tag')
    choice(name: 'TARGET_ENV', choices: ['dev','staging','prod'], description: 'Environment to target')
  }
  stages {
    stage('Checkout') {
      steps { checkout scm }
    }
    stage('Decision') {
      steps {
        sh label: 'Decide target cloud', script: '''
          set -euo pipefail
          chmod +x decision/decision_example.sh || true
          # Prefer Python probe; fallback to shell example
          DECISION_OUT=$(python3 decision/credits_probe.py --min-credit "${MIN_CREDIT}" --currency GBP || decision/decision_example.sh)
          echo "$DECISION_OUT"
          eval "$DECISION_OUT"   # exports TARGET_CLOUD and DECISION_REASON
          [ -n "$TARGET_CLOUD" ] || { echo 'No TARGET_CLOUD emitted'; exit 1; }
          echo "Chosen cloud: $TARGET_CLOUD ($DECISION_REASON)"
          echo "TARGET_CLOUD=$TARGET_CLOUD" > .decision.env
          echo "DECISION_REASON=$DECISION_REASON" >> .decision.env
        '''
        sh 'cat .decision.env'
      }
    }
    stage('Fetch Image Meta') {
      steps {
        sh label: 'Resolve latest image for chosen cloud', script: '''
          set -euo pipefail
          source .decision.env
          if [ "$TARGET_CLOUD" = "azure" ]; then
            : ${VHD_SAS_URL:="https://<storage>.blob.core.windows.net/vhds/control-node-${IMAGE_VERSION}.vhd?sv=..."}
            echo "VHD_SAS_URL=$VHD_SAS_URL" > .image.env
          else
            : ${GCP_IMAGE_NAME:="control-node-${IMAGE_VERSION}"}
            echo "GCP_IMAGE_NAME=$GCP_IMAGE_NAME" > .image.env
          fi
          cat .image.env
        '''
      }
    }
    stage('Terraform Apply') {
      steps {
        sh label: 'Apply for chosen cloud', script: '''
          set -euo pipefail
          source .decision.env
          source .image.env

          if [ "$TARGET_CLOUD" = "azure" ]; then
            pushd terraform/azure-failover
            terraform init -input=false
            terraform apply -auto-approve               -var "image_version=${IMAGE_VERSION}"               -var "vhd_uri=${VHD_SAS_URL}"               -var "prefix=ctrl-failover"               -var "location=uksouth"               -var "admin_username=azureuser"               -var "ssh_public_key=${HOME}/.ssh/id_rsa.pub"
            popd
          else
            pushd terraform/gcp-failover
            terraform init -input=false
            terraform apply -auto-approve               -var "image=${GCP_IMAGE_NAME}"               -var "project_id=<your-gcp-project>"               -var "region=europe-west2"               -var "zone=europe-west2-a"               -var "machine_type=e2-standard-4"               -var "admin_username=gcpuser"               -var "ssh_public_key=${HOME}/.ssh/id_rsa.pub"
            popd
          fi
        '''
      }
    }
  }
  post {
    always {
      archiveArtifacts artifacts: '**/.decision.env,**/.image.env', fingerprint: true
    }
  }
}
